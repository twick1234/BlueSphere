name: 'CI - Build, Test & Quality Checks'

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Job 1: Code Quality & Security Checks
  quality-checks:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: false

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Check for outdated dependencies
        run: npm outdated --depth=0 || true

  # Job 2: Build & Test
  build-test:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: quality-checks
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        if: matrix.node-version == '18.x'
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            !.next/cache/
          retention-days: 1

      - name: Run tests
        run: npm test

  # Job 3: E2E Tests (Playwright)
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 4000

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:4000 --timeout 30000

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Job 4: Performance & Accessibility Audit
  lighthouse-audit:
    name: 'Lighthouse Audit'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && github.ref == 'refs/heads/main'
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 4000

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:4000 --timeout 30000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4000
            http://localhost:4000/about
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 5: Bundle Analysis
  bundle-analysis:
    name: 'Bundle Analysis'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install bundle analyzer
        run: npm install --no-save @next/bundle-analyzer

      - name: Analyze bundle
        run: |
          ANALYZE=true npm run build
        env:
          NODE_ENV: production

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/
          retention-days: 7

  # Job 6: Code Coverage
  coverage:
    name: 'Code Coverage'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 7: Dependency Check & License Compliance
  dependency-check:
    name: 'Dependency & License Check'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Check licenses
        run: npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0" --production

      - name: Generate dependency tree
        run: npm ls --all > dependency-tree.txt || true

      - name: Upload dependency tree
        uses: actions/upload-artifact@v3
        with:
          name: dependency-tree
          path: dependency-tree.txt
          retention-days: 7

  # Job 8: Docker Build Test
  docker-build:
    name: 'Docker Build Test'
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bluesphere-site:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 9: Notification & Status Update
  status-update:
    name: 'Status Update'
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-checks, build-test, e2e-tests, lighthouse-audit, bundle-analysis, coverage, dependency-check, docker-build]
    
    steps:
      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const conclusion = '${{ needs.build-test.result }}' === 'success' && 
                              '${{ needs.quality-checks.result }}' === 'success' ? 
                              'success' : 'failure';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## 🔍 CI Pipeline Results
              
              | Check | Status |
              |-------|--------|
              | Code Quality & Security | ${{ needs.quality-checks.result == 'success' && '✅' || '❌' }} |
              | Build & Test | ${{ needs.build-test.result == 'success' && '✅' || '❌' }} |
              | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || needs.e2e-tests.result == 'skipped' && '⏭️' || '❌' }} |
              | Lighthouse Audit | ${{ needs.lighthouse-audit.result == 'success' && '✅' || needs.lighthouse-audit.result == 'skipped' && '⏭️' || '❌' }} |
              | Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅' || '❌' }} |
              | Code Coverage | ${{ needs.coverage.result == 'success' && '✅' || '❌' }} |
              | Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅' || '❌' }} |
              | Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || needs.docker-build.result == 'skipped' && '⏭️' || '❌' }} |
              
              **Overall Status**: ${conclusion === 'success' ? '✅ All checks passed!' : '❌ Some checks failed. Please review the details above.'}
              `
            });