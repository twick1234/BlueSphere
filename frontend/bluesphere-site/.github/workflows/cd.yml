name: 'CD - Deploy to Production & Staging'

on:
  push:
    branches: 
      - main       # Production deployment
      - develop    # Staging deployment
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18.x'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Job 1: Build and Prepare for Deployment
  build:
    name: 'Build for Deployment'
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.deployment-matrix.outputs.result }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run pre-deployment checks
        run: |
          npm run lint
          npm run type-check
          npm test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create deployment matrix
        id: deployment-matrix
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const ref = context.ref;
            let deployments = [];
            
            if (ref === 'refs/heads/main') {
              deployments.push({
                environment: 'production',
                url: 'https://bluesphere.org',
                vercel_target: 'production'
              });
            } else if (ref === 'refs/heads/develop') {
              deployments.push({
                environment: 'staging',
                url: 'https://staging.bluesphere.org',
                vercel_target: 'preview'
              });
            }
            
            return JSON.stringify(deployments);

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-assets
          path: |
            .next/
            public/
            package.json
            package-lock.json
            next.config.js
          retention-days: 1

  # Job 2: Security & Vulnerability Scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 3: Deploy to Environments
  deploy:
    name: 'Deploy to ${{ matrix.environment }}'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: needs.build.outputs.deployment-matrix != '[]'
    
    strategy:
      matrix:
        include: ${{ fromJSON(needs.build.outputs.deployment-matrix) }}
    
    environment:
      name: ${{ matrix.environment }}
      url: ${{ matrix.url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-assets

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ matrix.environment }}';
            const url = '${{ matrix.url }}';
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: url,
              description: `Successfully deployed to ${environment}`,
              auto_inactive: false
            });

  # Job 4: Post-Deployment Testing
  post-deployment-tests:
    name: 'Post-Deployment Tests'
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'
    
    strategy:
      matrix:
        include: ${{ fromJSON(needs.build.outputs.deployment-matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for ${{ matrix.url }} to be ready..."
          npx wait-on ${{ matrix.url }} --timeout 180000 --interval 5000

      - name: Run smoke tests
        run: |
          curl -f -s ${{ matrix.url }} > /dev/null
          curl -f -s ${{ matrix.url }}/api/health > /dev/null || true
        continue-on-error: false

      - name: Run Lighthouse audit on deployed site
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ matrix.url }}
            ${{ matrix.url }}/about
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ matrix.environment }}';
            const url = '${{ matrix.url }}';
            const sha = context.sha.substring(0, 7);
            
            if (context.eventName === 'push') {
              await github.rest.repos.createCommitComment({
                owner,
                repo,
                commit_sha: context.sha,
                body: `üöÄ **Deployment successful to ${environment}**\n\n` +
                      `üì± **Live URL**: ${url}\n` +
                      `üîç **Commit**: ${sha}\n` +
                      `‚úÖ **Status**: All post-deployment tests passed\n` +
                      `‚è±Ô∏è **Deployed at**: ${new Date().toISOString()}`
              });
            }

  # Job 5: Rollback on Failure
  rollback:
    name: 'Rollback on Failure'
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-tests]
    if: always() && (needs.deploy.result == 'failure' || needs.post-deployment-tests.result == 'failure')
    
    strategy:
      matrix:
        include: ${{ fromJSON(needs.build.outputs.deployment-matrix) }}
    
    steps:
      - name: Rollback deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ matrix.environment }}';
            
            console.log(`Initiating rollback for ${environment} environment`);
            
            // Get previous successful deployment
            const deployments = await github.rest.repos.listDeployments({
              owner,
              repo,
              environment,
              per_page: 10
            });
            
            const successfulDeployment = deployments.data.find(d => 
              d.sha !== context.sha
            );
            
            if (successfulDeployment) {
              console.log(`Found previous deployment: ${successfulDeployment.sha}`);
              // Create rollback deployment status
              await github.rest.repos.createDeploymentStatus({
                owner,
                repo,
                deployment_id: successfulDeployment.id,
                state: 'active',
                description: `Rolled back due to deployment failure`,
                auto_inactive: false
              });
            }

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ matrix.environment }}';
            
            await github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: `üîÑ **Rollback initiated for ${environment}**\n\n` +
                    `‚ùå **Reason**: Deployment or post-deployment tests failed\n` +
                    `‚è±Ô∏è **Time**: ${new Date().toISOString()}\n` +
                    `üîç **Check the workflow logs for details**`
            });

  # Job 6: Update Project Tracking
  update-tracking:
    name: 'Update Project Tracking'
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-tests]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Update project board
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const ref = context.ref;
            
            // Get associated issues/PRs
            const commits = await github.rest.repos.listCommits({
              owner,
              repo,
              sha: context.sha,
              per_page: 10
            });
            
            for (const commit of commits.data) {
              const message = commit.commit.message;
              const issueMatches = message.match(/#(\d+)/g);
              
              if (issueMatches) {
                for (const match of issueMatches) {
                  const issueNumber = parseInt(match.substring(1));
                  
                  try {
                    await github.rest.issues.createComment({
                      owner,
                      repo,
                      issue_number: issueNumber,
                      body: `üö¢ **Deployed to ${ref === 'refs/heads/main' ? 'Production' : 'Staging'}**\n\n` +
                            `This issue's changes have been successfully deployed.\n` +
                            `üìÖ **Deployment time**: ${new Date().toISOString()}`
                    });
                  } catch (error) {
                    console.log(`Could not comment on issue #${issueNumber}: ${error.message}`);
                  }
                }
              }
            }